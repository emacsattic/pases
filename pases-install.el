(let* ((pases-version "0.2")
       (pases-url (format "http://gales.cdlib.org/~egh/tmp/pases-%s.pases" pases-version))
       (download
	(lambda (url)
	  (if (fboundp 'url-retrieve-synchronously)
             ;; Use URL to download.
             (let ((buffer (url-retrieve-synchronously url)))
               (save-excursion
                 (set-buffer buffer)
                 (goto-char (point-min))
                 (re-search-forward "^$" nil 'move)
                 (forward-char)
                 (delete-region (point-min) (point))
                 buffer))
           ;; Use wget to download.
           (save-excursion
             (with-current-buffer
                 (get-buffer-create
                  (generate-new-buffer-name " *Download*"))
               (shell-command (concat "wget -q -O- " url)
                              (current-buffer))
               (goto-char (point-min))
               (current-buffer))))))
       (pkg-buffer (funcall download pases-url))
       (pases-install-dir (expand-file-name (format "~/.pases.d/pases-%s/" pases-version))))
  (require 'tar-mode)
  (save-excursion
    (set-buffer pkg-buffer)
    (call-process-region (point-min) (point-max) "gzip" t pkg-buffer nil "-c" "-q" "-d")
    (if (file-exists-p pases-install-dir)
        (error "[pases] Pases already installed?"))
    (make-directory pases-install-dir t)
    (let ((default-directory pases-install-dir))
      (tar-summarize-buffer)
      (tar-untar-buffer)))
  (load (expand-file-name "pases.el" pases-install-dir))
  (message "[pases] Successfully installed pases.")
  (if (not user-init-file)
      (error "[pases] user-init-file not defined."))
  (require 'pp)
  (let ((old-buffer (find-buffer-visiting user-init-file))
        (pases-load-file (expand-file-name "pases.el" pases-install-dir)))
    (with-current-buffer (let ((find-file-visit-truename t))
                           (or old-buffer (find-file-noselect user-init-file)))
      (unless (eq major-mode 'emacs-lisp-mode)
        (emacs-lisp-mode))
      (let ((inhibit-read-only t))
        (save-excursion
          (goto-char (point-max))
          (newline (if (bolp) 2 1))
          (insert ";;; This was installed by pases-install.el.\n")
          (insert ";;; This provides support for Pases, Packaging and System for Emacs.\n")
          (insert ";;; Move this code earlier if you want to reference\n")
          (insert ";;; packages in your .emacs.\n")
          (insert (pp-to-string `(load ,pases-load-file)))
          (let ((file-precious-flag t))
            (save-buffer))
          (unless old-buffer
            (kill-buffer (current-buffer))))))))
